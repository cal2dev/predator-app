<?php
    2 
    3 use Doctrine\ORM\Mapping\ClassMetadataInfo;
    4 
    5 $metadata->setInheritanceType(ClassMetadataInfo::INHERITANCE_TYPE_NONE);
    6 $metadata->setPrimaryTable(array(
    7    'name' => 'cms_users',
    8   ));
    9 $metadata->setChangeTrackingPolicy(ClassMetadataInfo::CHANGETRACKING_DEFERRED_IMPLICIT);
   10 $metadata->addLifecycleCallback('doStuffOnPrePersist', 'prePersist');
   11 $metadata->addLifecycleCallback('doOtherStuffOnPrePersistToo', 'prePersist');
   12 $metadata->addLifecycleCallback('doStuffOnPostPersist', 'postPersist');
   13 $metadata->addNamedQuery(array(
   14     'name'  => 'all',
   15     'query' => 'SELECT u FROM __CLASS__ u'
   16 ));
   17 $metadata->mapField(array(
   18    'id' => true,
   19    'fieldName' => 'id',
   20    'type' => 'integer',
   21    'columnName' => 'id',
   22   ));
   23 $metadata->mapField(array(
   24    'fieldName' => 'name',
   25    'type' => 'string',
   26    'length' => 50,
   27    'unique' => true,
   28    'nullable' => true,
   29    'columnName' => 'name',
   30    'options' => array('foo' => 'bar', 'baz' => array('key' => 'val')),
   31   ));
   32 $metadata->mapField(array(
   33    'fieldName' => 'email',
   34    'type' => 'string',
   35    'columnName' => 'user_email',
   36    'columnDefinition' => 'CHAR(32) NOT NULL',
   37   ));
   38 $mapping = array('fieldName' => 'version', 'type' => 'integer');
   39 $metadata->setVersionMapping($mapping);
   40 $metadata->mapField($mapping);
   41 $metadata->setIdGeneratorType(ClassMetadataInfo::GENERATOR_TYPE_AUTO);
    $metadata->mapOneToOne(
		array(
       	'fieldName' => 'address',
       	'targetEntity' => 'Doctrine\\Tests\\ORM\\Mapping\\Address',
      	 'cascade' =>array(
								 0 => 'remove', //persist , merge , refresh ,detach  , all
						   ),
      	'mappedBy' => NULL,
       	'inversedBy' => 'user',
       'joinColumns' =>array( 0 =>array(
									'name' => 'address_id',
									'referencedColumnName' => 'id',
									'onDelete' => 'CASCADE',
								   ),
				),
       'orphanRemoval' => false,
      ));
    $metadata->mapOneToMany(array(
   63    'fieldName' => 'phonenumbers',
   64    'targetEntity' => 'Doctrine\\Tests\\ORM\\Mapping\\Phonenumber',
   65    'cascade' =>
   66    array(
   67    1 => 'persist',
   68    ),
   69    'mappedBy' => 'user',
   70    'orphanRemoval' => true,
   71    'orderBy' =>
   72    array(
   73    'number' => 'ASC',
   74    ),
   75   ));
   76 $metadata->mapManyToMany(array(
   77    'fieldName' => 'groups',
   78    'targetEntity' => 'Doctrine\\Tests\\ORM\\Mapping\\Group',
   79    'cascade' =>
   80    array(
   81    0 => 'remove',
   82    1 => 'persist',
   83    2 => 'refresh',
   84    3 => 'merge',
   85    4 => 'detach',
   86    ),
   87    'mappedBy' => NULL,
   88    'joinTable' =>
   89    array(
   90    'name' => 'cms_users_groups',
   91    'joinColumns' =>
   92    array(
   93     0 =>
   94     array(
   95     'name' => 'user_id',
   96     'referencedColumnName' => 'id',
   97     'unique' => false,
   98     'nullable' => false,
   99     ),
  100    ),
  101    'inverseJoinColumns' =>
  102    array(
  103     0 =>
  104     array(
  105     'name' => 'group_id',
  106     'referencedColumnName' => 'id',
  107     'columnDefinition' => 'INT NULL',
  108     ),
  109    ),
  110    ),
  111    'orderBy' => NULL,
  112   ));
  113 $metadata->table['options'] = array(
  114     'foo' => 'bar', 
  115     'baz' => array('key' => 'val')
  116 );
  117 $metadata->table['uniqueConstraints'] = array(
  118     'search_idx' => array('columns' => array('name', 'user_email')),
  119 );
  120 $metadata->table['indexes'] = array(
  121     'name_idx' => array('columns' => array('name')), 0 => array('columns' => array('user_email'))
  122 );
  123 $metadata->setSequenceGeneratorDefinition(array(
  124         'sequenceName' => 'tablename_seq',
  125         'allocationSize' => 100,
  126         'initialValue' => 1,
  127     ));
 ===================================================================
 
 
 
  static public function loadMetadata(ClassMetadata $metadata)
    {
        $metadata->setIdGeneratorType(ClassMetadata::GENERATOR_TYPE_AUTO);
        $metadata->setChangeTrackingPolicy(ClassMetadata::CHANGETRACKING_DEFERRED_EXPLICIT);
        $metadata->setCustomRepositoryClass('Bookstore\BookRepository');
        $metadata->setPrimaryTable(array('name' => 'book'));

        $metadata->mapField(array(
            'fieldName'  => 'id',
            'type'       => 'integer',
            'id'         => true,
            'columnName' => 'id',
        ));
        $metadata->mapField(array(
            'fieldName'  => 'name',
            'type'       => 'string',
            'columnName' => 'name',
        ));
        $metadata->mapField(array(
            'fieldName'  => 'status',
            'type'       => 'string',
            'default'    => 'published',
            'columnName' => 'status',
        ));

        $metadata->mapOneToOne(array(
            'fieldName'         => 'author',
            'targetEntity'      => 'Doctrine\Tests\ORM\Tools\EntityGeneratorAuthor',
            'mappedBy'          => 'book',
            'cascade'           => array(),
            'fetch'             => ClassMetadata::FETCH_LAZY,
            'joinColumns'       => array(array(
                'name'                 => 'author_id',
                'referencedColumnName' => 'id',
                'unique'               => true,
            )),
        ));
        $metadata->mapManyToMany(array(
            'fieldName'         => 'comments',
            'targetEntity'      => 'Doctrine\Tests\ORM\Tools\EntityGeneratorComment',
            'cascade'           => array(),
            'fetch'             => ClassMetadata::FETCH_LAZY,
            'joinTable'         => array(
                'name'               => 'book_comment',
                'joinColumns'        => array(array(
                    'name'                 => 'book_id',
                    'referencedColumnName' => 'id',
                )),
                'inverseJoinColumns' => array(array(
                    'name'                 => 'comment_id',
                    'referencedColumnName' => 'id',
                )),
            ),
        ));

        $metadata->setLifecycleCallbacks(array(
            'postLoad'  => array('loading'),
            'preRemove' => array('willBeRemoved'),
        ));
    }
==================================================================== 
  ------------------------------------------------------------------
  function __construct() {
    	$this->userregUstamp = new \DateTime("now");
    	$this->userregUstamp = new \DateTime("now");
    }
=============================================================
  
==============================================
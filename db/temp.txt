<?php
    2 
    3 use Doctrine\ORM\Mapping\ClassMetadataInfo;
    4 
    5 $metadata->setInheritanceType(ClassMetadataInfo::INHERITANCE_TYPE_NONE);
    6 $metadata->setPrimaryTable(array(
    7    'name' => 'cms_users',
    8   ));
    9 $metadata->setChangeTrackingPolicy(ClassMetadataInfo::CHANGETRACKING_DEFERRED_IMPLICIT);
   10 $metadata->addLifecycleCallback('doStuffOnPrePersist', 'prePersist');
   11 $metadata->addLifecycleCallback('doOtherStuffOnPrePersistToo', 'prePersist');
   12 $metadata->addLifecycleCallback('doStuffOnPostPersist', 'postPersist');
   13 $metadata->addNamedQuery(array(
   14     'name'  => 'all',
   15     'query' => 'SELECT u FROM __CLASS__ u'
   16 ));
   17 $metadata->mapField(array(
   18    'id' => true,
   19    'fieldName' => 'id',
   20    'type' => 'integer',
   21    'columnName' => 'id',
   22   ));
   23 $metadata->mapField(array(
   24    'fieldName' => 'name',
   25    'type' => 'string',
   26    'length' => 50,
   27    'unique' => true,
   28    'nullable' => true,
   29    'columnName' => 'name',
   30    'options' => array('foo' => 'bar', 'baz' => array('key' => 'val')),
   31   ));
   32 $metadata->mapField(array(
   33    'fieldName' => 'email',
   34    'type' => 'string',
   35    'columnName' => 'user_email',
   36    'columnDefinition' => 'CHAR(32) NOT NULL',
   37   ));
   38 $mapping = array('fieldName' => 'version', 'type' => 'integer');
   39 $metadata->setVersionMapping($mapping);
   40 $metadata->mapField($mapping);
   41 $metadata->setIdGeneratorType(ClassMetadataInfo::GENERATOR_TYPE_AUTO);
   42 $metadata->mapOneToOne(array(
   43    'fieldName' => 'address',
   44    'targetEntity' => 'Doctrine\\Tests\\ORM\\Mapping\\Address',
   45    'cascade' =>
   46    array(
   47    0 => 'remove',
   48    ),
   49    'mappedBy' => NULL,
   50    'inversedBy' => 'user',
   51    'joinColumns' =>
   52    array(
   53    0 =>
   54    array(
   55     'name' => 'address_id',
   56     'referencedColumnName' => 'id',
   57     'onDelete' => 'CASCADE',
   58    ),
   59    ),
   60    'orphanRemoval' => false,
   61   ));
   62 $metadata->mapOneToMany(array(
   63    'fieldName' => 'phonenumbers',
   64    'targetEntity' => 'Doctrine\\Tests\\ORM\\Mapping\\Phonenumber',
   65    'cascade' =>
   66    array(
   67    1 => 'persist',
   68    ),
   69    'mappedBy' => 'user',
   70    'orphanRemoval' => true,
   71    'orderBy' =>
   72    array(
   73    'number' => 'ASC',
   74    ),
   75   ));
   76 $metadata->mapManyToMany(array(
   77    'fieldName' => 'groups',
   78    'targetEntity' => 'Doctrine\\Tests\\ORM\\Mapping\\Group',
   79    'cascade' =>
   80    array(
   81    0 => 'remove',
   82    1 => 'persist',
   83    2 => 'refresh',
   84    3 => 'merge',
   85    4 => 'detach',
   86    ),
   87    'mappedBy' => NULL,
   88    'joinTable' =>
   89    array(
   90    'name' => 'cms_users_groups',
   91    'joinColumns' =>
   92    array(
   93     0 =>
   94     array(
   95     'name' => 'user_id',
   96     'referencedColumnName' => 'id',
   97     'unique' => false,
   98     'nullable' => false,
   99     ),
  100    ),
  101    'inverseJoinColumns' =>
  102    array(
  103     0 =>
  104     array(
  105     'name' => 'group_id',
  106     'referencedColumnName' => 'id',
  107     'columnDefinition' => 'INT NULL',
  108     ),
  109    ),
  110    ),
  111    'orderBy' => NULL,
  112   ));
  113 $metadata->table['options'] = array(
  114     'foo' => 'bar', 
  115     'baz' => array('key' => 'val')
  116 );
  117 $metadata->table['uniqueConstraints'] = array(
  118     'search_idx' => array('columns' => array('name', 'user_email')),
  119 );
  120 $metadata->table['indexes'] = array(
  121     'name_idx' => array('columns' => array('name')), 0 => array('columns' => array('user_email'))
  122 );
  123 $metadata->setSequenceGeneratorDefinition(array(
  124         'sequenceName' => 'tablename_seq',
  125         'allocationSize' => 100,
  126         'initialValue' => 1,
  127     ));
  
  ------------------------------------------------------------------
  function __construct() {
    	$this->userregUstamp = new \DateTime("now");
    	$this->userregUstamp = new \DateTime("now");
    }
	=============================================================
  
  <?php
namespace Entities;

class AppUserRegister
{
    
    private $userregUniqueId;
    
	private $userregId;
   
	private $userregRecordhash;

    private $userregUserName;

    private $userregEmailId;

    private $userregPassword;

    private $userregFirstname;

    private $userregLastname;

    private $userregActive = '0';

    private $userregStatus = '0';

    private $userregUnlogincount;

    private $userregNow;
   

    public function setUserregUniqueId($userregUniqueId)
    {
        $this->userregUniqueId = $userregUniqueId;

        return $this;
    }

    public function getUserregUniqueId()
    {
        return $this->userregUniqueId;
    }

    public function setUserregRecordhash($userregRecordhash)
    {
        $this->userregRecordhash = $userregRecordhash;

        return $this;
    }

    
    public function getUserregRecordhash()
    {
        return $this->userregRecordhash;
    }

    
    public function setUserregUserName($userregUserName)
    {
        $this->userregUserName = $userregUserName;

        return $this;
    }

    public function getUserregUserName()
    {
        return $this->userregUserName;
    }

    public function setUserregEmailId($userregEmailId)
    {
        $this->userregEmailId = $userregEmailId;

        return $this;
    }

   
    public function getUserregEmailId()
    {
        return $this->userregEmailId;
    }

    
    public function setUserregPassword($userregPassword)
    {
        $this->userregPassword = $userregPassword;

        return $this;
    }

    public function getUserregPassword()
    {
        return $this->userregPassword;
    }

    
    public function setUserregFirstname($userregFirstname)
    {
        $this->userregFirstname = $userregFirstname;

        return $this;
    }

    public function getUserregFirstname()
    {
        return $this->userregFirstname;
    }

   
    public function setUserregLastname($userregLastname)
    {
        $this->userregLastname = $userregLastname;

        return $this;
    }

    public function getUserregLastname()
    {
        return $this->userregLastname;
    }

    public function setUserregActive($userregActive)
    {
        $this->userregActive = $userregActive;

        return $this;
    }

    public function getUserregActive()
    {
        return $this->userregActive;
    }

    public function setUserregStatus($userregStatus)
    {
        $this->userregStatus = $userregStatus;

        return $this;
    }

    public function getUserregStatus()
    {
        return $this->userregStatus;
    }

    public function setUserregUnlogincount($userregUnlogincount)
    {
        $this->userregUnlogincount = $userregUnlogincount;

        return $this;
    }

    public function getUserregUnlogincount()
    {
        return $this->userregUnlogincount;
    }

    public function setUserregNow($userregNow)
    {
        $this->userregNow = $userregNow;

        return $this;
    }

    public function getUserregNow()
    {
        return $this->userregNow;
    }

    public function setUserregCstamp($userregCstamp)
    {
        $this->userregCstamp = $userregCstamp;

        return $this;
    }

    public function getUserregCstamp()
    {
        return $this->userregCstamp;
    }

    public function setUserregUstamp($userregUstamp)
    {
        $this->userregUstamp = $userregUstamp;

        return $this;
    }

    public function getUserregUstamp()
    {
        return $this->userregUstamp;
    }

    public function getUserregId()
    {
        return $this->userregId;
    }
}
==============================================